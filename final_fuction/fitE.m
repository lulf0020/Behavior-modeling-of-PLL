function [Yout,Xf,Af] = fitE(Xin,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Nov-2021 16:45:29.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx15 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
%data pre-operation
inmean = [1472282.37791932,5.51528662420382e-11,0.00278906581740977,5.45339702760085e-08,9.99999999999999e-08,1538.64118895966,19037154.9893843,2243297653.92781,5.50000000000000e-12,5.50000000000000e-11,5.75000000000000e-13,501,47500,575000,78];
inwid = [495000,4.50000000000000e-11,0.00200000000000000,4.50000000000000e-08,0,494.500000000000,10000000,1442910000.00000,3.50000000000000e-12,4.50000000000000e-11,5.25000000000000e-13,491,42500,525000,73];
outmean = -160.028207876107;
outwid = 130.120524186061;

X = Xin;
for i = 1:15
    X(:,i) = X(:,i)-inmean(i);
    if inwid(i) == 0
        X(:,i) = 0;
    else
        X(:,i) = X(:,i)/inwid(i);
    end
end


% Input 1
x1_step1.keep = [1 2 3 4 6 7 8 9 10 11 12 13 14 15];
x1_step2.xoffset = [-0.954105813978425;-1.00339702760085;-0.894532908704883;-0.989643783911299;-1.08724204036332;-0.903715498938429;-0.824041453678894;-0.934285714285714;-1;-1.0952380952381;-1.020366598778;-0.997647058823529;-1.0952380952381;-1.06849315068493];
x1_step2.gain = [1;1;1;1;1;1;1;1.03703703703704;1.00334448160535;0.954545454545454;0.991404038896482;1.00472813238771;0.956284153005464;0.972826325250923];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.47869282952957370458;0.52842062898739361465;0.93172353013850583991;0.57425541841401284149;0.76301790565775617914;-0.072277844906979984985;0.80561023352194305325];
IW1_1 = [0.08466765901006172157 -0.041891566284180746516 0.025714791872641119819 -0.079762692155295994434 0.07816502556318277728 -0.020910765527086237064 0.27129797699234309283 0.0067505207021564357303 0.51022941411103639453 0.14548858352116186832 -0.17225362538224511799 0.060028258137160152297 -0.25247374342518696944 0.4737646713326355008;-0.92132584771157133297 -0.065278284587619486712 0.41282956382062535594 0.073819966601174596965 -1.5738410480214515275 0.19339322085457835709 2.7045289506237626398 -0.35509261152370774628 0.16141169528046742099 -0.46819106264075815993 -0.24817087159472345226 0.87401720669829319199 0.21315795629140005252 -0.56266243435958762653;-0.88346246751397305985 0.25670477748591707945 0.34219588995434874201 0.14882186901439251048 -1.2136424320201817384 0.064212251849209062149 2.7108688147061830165 0.39704685101107067835 0.80426212772575089716 -0.35030141591579577742 0.14923927895718705483 0.29571283209791376922 -0.35388793857877881566 0.51947247685529729377;-0.43788341223554183568 -0.44645003002064742592 0.1661632094230391099 -0.4701138403686103695 -0.68925396421330265007 0.033195176891260197438 1.5785960876269349296 -0.83283189011109448607 0.5368337067241877314 0.085308438048810719678 -0.33927034058298199959 0.33362844396691998528 -0.0050536146751462953167 -0.014364794025083406012;-0.036267980755577439167 0.54891896454728672516 0.35916887511652784148 1.3079312176540922597 -0.60210995645192144643 -0.40970117129272570766 2.4075081938864038023 1.3257771157117890226 0.56720137161940720194 0.24184448788696744082 1.6810838676180381857 -0.19736206428245539612 -1.1615627944528976734 -1.3923630925353864818;-0.86539533874055118989 -0.52928759551033266462 -0.34620412096372965571 -1.4379443264669651281 -0.24233041555324458249 0.47800805988802197444 -0.66385250344528978772 -1.2916755910034858346 -0.49247781273256413526 -0.25379695750456954251 -1.1079159393514772525 0.21728792958887085951 0.90587193832146095662 1.3570366140224727758;0.17275239148087886965 -0.77993071793713120154 0.27160288477821625808 -0.99882733815262814137 -0.028046124627956504904 -0.19067168623143126993 0.43680660332556814351 -1.4387240638019525019 0.72130021787416187529 -0.10848590186725093343 0.23725230037284028572 -0.14924848153611366963 0.36248863522213525812 -0.078666468860927665774];

% Layer 2
b2 = 0.75412975922056868505;
LW2_1 = [-3.2077926626393784559 -1.5614994159679993491 1.5200980205281358071 2.6751053196791017008 -2.1246754034206047912 -2.2378631107201050199 -0.97092939607416772763];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1.11572009599453;


% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
Yout = Y;
if(outwid~=0)
    Yout = Yout*outwid;
end
Yout= Yout + outmean;

% Yout = -exp(Yout);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
