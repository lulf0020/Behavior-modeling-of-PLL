function [Yout,Xf,Af] = fitF(Xin,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 15-Nov-2021 14:40:32.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx15 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
%data pre-operation
inmean = [1472282.37791932,5.51528662420382e-11,0.00278906581740977,5.45339702760085e-08,9.99999999999999e-08,1538.64118895966,19037154.9893843,2243297653.92781,5.50000000000000e-12,5.50000000000000e-11,5.75000000000000e-13,501,47500,575000,78];
inwid = [495000,4.50000000000000e-11,0.00200000000000000,4.50000000000000e-08,0,494.500000000000,10000000,1442910000.00000,3.50000000000000e-12,4.50000000000000e-11,5.25000000000000e-13,491,42500,525000,73];
outmean = -184.691972632240;
outwid = 151.895311185560;

X = Xin;
for i = 1:15
    X(:,i) = X(:,i)-inmean(i);
    if inwid(i) == 0
        X(:,i) = 0;
    else
        X(:,i) = X(:,i)/inwid(i);
    end
end


% Input 1
x1_step1.keep = [1 2 3 4 6 7 8 9 10 11 12 13 14 15];
x1_step2.xoffset = [-0.954105813978425;-1.00339702760085;-0.894532908704883;-0.989643783911299;-1.08724204036332;-0.903715498938429;-0.824041453678894;-0.934285714285714;-1;-1.0952380952381;-1.020366598778;-0.997647058823529;-1.0952380952381;-1.06849315068493];
x1_step2.gain = [1;1;1;1;1;1;1;1.03703703703704;1.00334448160535;0.954545454545454;0.991404038896482;1.00472813238771;0.956284153005464;0.972826325250923];
x1_step2.ymin = -1;

% Layer 1
b1 = [-0.10366958843853114891;-0.40197778989992272169;-3.841750872485649726;1.3233163003294288185;-3.0599088465221431221;1.4298670144830898376];
IW1_1 = [-1.1771492084051415894 0.49059553700692487554 -0.74315393244000127471 -1.9607242433713230056 1.5278105929984910905 -0.15953441516175184689 -1.9509075654351977214 -0.038835951113916376831 0.34250993147003178096 0.091497515029862946934 -2.5421518597155219332 -0.053370180133708255976 -0.74296094127301515186 5.0079364547132101393;1.7256283346812903989 -0.43999684428876079112 0.76689932287951823042 1.9538951972027627235 -0.94887965887268421739 0.089227265526352211866 0.77226814593786929919 0.41813100873559294612 -0.62818944492022887882 -0.2030746700917907821 2.3682741563031259879 -0.42834216099381677845 0.67807042191913025064 -4.8585552987319617912;-0.45242423130632258843 1.4163393308151188688 0.71633725842607931522 1.0929076283243874812 -0.68977962713952867269 0.43217127263863192033 2.2587795346946011321 0.25450336610461887776 -1.2640530577825057623 -1.0469372075781848697 -1.0289437672764520926 1.218344268083563442 0.46073692678060290673 -0.15631763931113573651;-1.3530226146326935766 -0.16500021638347234232 0.45140587554027150619 -0.48608070854429935581 -0.15195182219911104737 -1.3723076658040236353 3.2038667462937397978 0.1519183119214101152 1.6540834457836668392 -1.7203047471518784217 -0.060736519295016423714 2.7898984100678059228 1.2742116790196078568 -0.37234689182951152819;-0.75783711939308096017 0.016090949374288468499 -0.71562679522704253365 -0.15951862393799959294 0.094661658291847319835 0.6280415591447825463 -1.3638048548686489969 -1.7541590185531930057 -0.98459350612515283974 0.91052129547658655628 -1.5898145124870319833 -1.0068233547734768418 0.23857236566533995825 -0.80051494547792634293;-1.2846047695882176765 -0.15855286743210961209 0.43408917392698331827 -0.62935927631763932677 0.30385091467557184819 -1.4825592627890202824 2.5551585859971313042 0.1137784377921811918 1.4243686314691759165 -1.8221271228292734712 0.09318573419762174459 2.7775440737885483955 1.6695599075226692509 -0.62915110929509165949];

% Layer 2
b2 = 1.4427396531189362605;
LW2_1 = [2.338506251098956934 2.3543429445216541573 1.136444967054506483 1.566446904239272131 0.38531659767624737434 -1.5020390343566982772];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -0.98144495377313;


% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end

Yout = Y;
if(outwid~=0)
    Yout = Yout*outwid;
end
Yout= Yout + outmean;

end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
