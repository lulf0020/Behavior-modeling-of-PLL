function [Yout,Xf,Af] = fitC(Xin,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Nov-2021 16:45:29.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx15 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
%data pre-operation
inmean = [1472282.37791932,5.51528662420382e-11,0.00278906581740977,5.45339702760085e-08,9.99999999999999e-08,1538.64118895966,19037154.9893843,2243297653.92781,5.50000000000000e-12,5.50000000000000e-11,5.75000000000000e-13,501,47500,575000,78];
inwid = [495000,4.50000000000000e-11,0.00200000000000000,4.50000000000000e-08,0,494.500000000000,10000000,1442910000.00000,3.50000000000000e-12,4.50000000000000e-11,5.25000000000000e-13,491,42500,525000,73];
outmean = -100.352875568204;
outwid = 130.790355401225;

X = Xin;
for i = 1:15
    X(:,i) = X(:,i)-inmean(i);
    if inwid(i) == 0
        X(:,i) = 0;
    else
        X(:,i) = X(:,i)/inwid(i);
    end
end


% Input 1
x1_step1.keep = [1 2 3 4 6 7 8 9 10 11 12 13 14 15];
x1_step2.xoffset = [-0.954105813978425;-1.00339702760085;-0.894532908704883;-0.989643783911299;-1.08724204036332;-0.903715498938429;-0.824041453678894;-0.934285714285714;-1;-1.0952380952381;-1.020366598778;-0.997647058823529;-1.0952380952381;-1.06849315068493];
x1_step2.gain = [1;1;1;1;1;1;1;1.03703703703704;1.00334448160535;0.954545454545454;0.991404038896482;1.00472813238771;0.956284153005464;0.972826325250923];
x1_step2.ymin = -1;

% Layer 1
b1 = [2.9618755775783660589;-2.7125132006362968617;-1.443497519076548663;-2.612892998504051878;4.4184252724595900474;1.3687644786886461468];
IW1_1 = [1.5467164883551949295 1.8512697233027619603 -2.8112102550847772875 1.5661455770043344327 2.3457738639738967557 -1.2766931551975593262 -0.82719755921504856122 -1.155982436864023466 -1.6062978988812011139 -1.3540711767449702396 -0.34914443586077364978 -1.7357532439230169974 -2.4995133215639273594 -2.8399486707951981934;-1.3644141369284843446 -1.1366421687715280164 2.1908574401921483421 -0.52679380123085040033 0.0637699355674661017 0.54112183854136963745 -1.6206766908206664546 1.175709738524986836 1.52048991811271339 0.38200172017575761974 1.3985213723095493155 0.61229453612511508531 1.8243699535400552669 2.3193018929022324315;0.54304602714399474728 -1.3627537711813053622 -0.33621816630702178186 -1.79413437457224334 1.7603001815842458377 0.20211277427962084929 -0.79150831739457838676 1.3143547993935018603 -0.016314400895014690568 2.9419994055883256223 2.5363877655334152728 1.9603740451292404057 -1.939798211810174422 -1.4111005527167883589;-0.57125143112345044827 -0.761792635611156288 -0.66385602782904862273 -1.1814544172528647081 -0.66609934128849157542 0.4264398765845799355 1.2598189872536726952 0.48696192888486755646 -1.5036822225897310545 0.50990208887410293226 0.15788562408808878845 -0.72797865464107203159 -0.28637646405656930204 -0.72206957384753511775;3.6913391567070981125 0.83466755745474074946 -1.5101280242994052916 0.99429993430906937757 -0.83039559966298592819 0.20593201885965170539 1.6092591051213354092 -1.1544621099126710639 -1.3607536978517542625 0.11908087623154041401 -1.8877120081397658069 -0.07112693596545405228 -0.57042918347635185317 -0.99578049653477429537;-0.4720479627926703059 1.1253935872661116058 -0.10892483655627432926 1.4857513808108948616 -1.9449490244103670999 0.085195229463662591751 1.0557468245135399609 -1.6004391262076844704 -0.30179461134140272982 -2.7045207204837442561 -2.0108699006893870909 -2.1059882089684709428 1.2321205988585608448 0.73956832307200426335];

% Layer 2
b2 = -0.10271407274287860933;
LW2_1 = [2.2692463457157052709 2.3533793523576584938 -1.1219984203208925866 0.56243303420775159207 1.4919488571441650304 -1.2004423028262025674];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1.61523721205247;


% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
Yout = Y;
if(outwid~=0)
    Yout = Yout*outwid;
end
Yout= Yout + outmean;

% Yout = -exp(Yout);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
