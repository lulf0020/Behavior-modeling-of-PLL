function [Yout,Xf,Af] = fitD(Xin,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Nov-2021 16:45:29.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx15 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====
%data pre-operation
inmean = [1472282.37791932,5.51528662420382e-11,0.00278906581740977,5.45339702760085e-08,9.99999999999999e-08,1538.64118895966,19037154.9893843,2243297653.92781,5.50000000000000e-12,5.50000000000000e-11,5.75000000000000e-13,501,47500,575000,78];
inwid = [495000,4.50000000000000e-11,0.00200000000000000,4.50000000000000e-08,0,494.500000000000,10000000,1442910000.00000,3.50000000000000e-12,4.50000000000000e-11,5.25000000000000e-13,491,42500,525000,73];
outmean = -136.119986003354;
outwid = 126.855166114666;

X = Xin;
for i = 1:15
    X(:,i) = X(:,i)-inmean(i);
    if inwid(i) == 0
        X(:,i) = 0;
    else
        X(:,i) = X(:,i)/inwid(i);
    end
end


% Input 1
x1_step1.keep = [1 2 3 4 6 7 8 9 10 11 12 13 14 15];
x1_step2.xoffset = [-0.954105813978425;-1.00339702760085;-0.894532908704883;-0.989643783911299;-1.08724204036332;-0.903715498938429;-0.824041453678894;-0.934285714285714;-1;-1.0952380952381;-1.020366598778;-0.997647058823529;-1.0952380952381;-1.06849315068493];
x1_step2.gain = [1;1;1;1;1;1;1;1.03703703703704;1.00334448160535;0.954545454545454;0.991404038896482;1.00472813238771;0.956284153005464;0.972826325250923];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.34165178933077178236;0.072796802306084304468;-3.8236174854678051105;-2.7069570803868923115;-2.3417047177059306939;-8.3372595821858244136];
IW1_1 = [2.7065722645189809192 1.1516656859449971861 2.4608173368862895636 3.0665052409626376573 2.6202110220648213712 -2.2770322447475694894 0.56600324354713804631 1.6924329680257486075 3.8841154254943068835 -3.117078873882160206 4.4683427914215450016 0.62823082380962158577 1.6765565720841910657 -5.0342963866532679518;2.3662740156838482086 1.4316189348985990382 2.6621436110113885221 3.5511454117152987386 2.4289723312760065355 -2.4951679415718341914 1.6389095365723642672 1.7787701581607997525 4.2950973537979937333 -3.4922524241231007736 4.2284719010021873942 0.49888265561907246814 1.6634424107933345471 -5.0304876770150430687;-2.8182937977875752722 2.1761085060233065214 -0.76561215605775423398 3.7606619363550959356 -2.7841716236831688391 0.45389044113669363423 3.4251497211877537374 2.8040479099087618486 0.82351806292428075817 -1.3469398698231522804 -0.53982776235681695365 -1.8080231308916097088 -3.78502564041830869 -5.2294309684331938826;3.5088967236387587079 0.38847121884416463411 1.400932106888827855 2.393636870868244948 0.22921598916861127271 -0.081746654930521217564 -4.1740743233613439855 0.72011591150413245543 -0.48360766555880640993 -0.90533395043009623482 -2.3681417546778087413 -0.19921593430247028222 -0.22311074071275710518 -2.3871419756906249177;2.3070342794007321352 0.48253085558834513114 0.95646686744149667092 2.2572706361246459572 -0.083044698761573443324 -0.0065093486058849688025 -2.7504362855701796065 0.82320159212126686743 -0.42209665450512251494 -0.72573329873401160039 -1.9014199382559433538 -0.36679553643147783104 -0.24263537268630355759 -2.3195966316497980131;-4.7359617305295405032 1.6989608746994306898 -1.22461353332391365 -0.22666875839118483249 4.5402167370904917831 -0.081975924339548117414 -1.3167196134383252204 3.3489211187968295214 -1.3132721586683202553 -1.593610651107409959 2.0052630916196405586 -3.1926015833927565701 2.3817865748599689191 -0.7229477414947230729];

% Layer 2
b2 = -0.17522803852864102248;
LW2_1 = [-1.789116336309485078 1.7464050139813933615 -0.31228917669001354795 -2.2481766449656159779 2.607231720425400745 -0.55747316707662364355];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1.31125139867217;


% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
Yout = Y;
if(outwid~=0)
    Yout = Yout*outwid;
end
Yout= Yout + outmean;

% Yout = -exp(Yout);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
